<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-02-21T19:03:26+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">CodingLog</title><subtitle>백엔드 개발 로그</subtitle><author><name>hyeyeon-sun</name></author><entry><title type="html">java spring batch multi-thread</title><link href="http://localhost:4000/2023/02/17/java_spring_batch(1).html" rel="alternate" type="text/html" title="java spring batch multi-thread" /><published>2023-02-17T23:45:13+09:00</published><updated>2023-02-17T23:45:13+09:00</updated><id>http://localhost:4000/2023/02/17/java_spring_batch(1)</id><content type="html" xml:base="http://localhost:4000/2023/02/17/java_spring_batch(1).html"><![CDATA[<h2 id="이-글에서-얻을-수-있는-정보">이 글에서 얻을 수 있는 정보</h2>

<hr />

<ul>
  <li>스프링 배치가 무엇이고, 작동원리가 무엇인지</li>
  <li>배치를 더욱 빨리 처리하려면 어떻게 해야하는지</li>
</ul>

<p><br /></p>

<h2 id="spring-batch란-">spring batch란 ?</h2>

<hr />

<ul>
  <li>
    <p>어플리케이션을 운영하다보면 사용자와의 상호작용 없이, 대량의 데이터를 한번에 가공해야할 일이 생긴다. 예를 들어 월초에 사용자의 실적에 따라 등급을 업그레이드하거나, 연말 정산등을 할 때도 한번에 수많은 자료를 일괄적으로 처리해야 한다.</p>
  </li>
  <li>
    <p>그리고 이런 작업은 대부분 반복적으로 수행되며, 레코드를 읽고 → 데이터를 처리하고 → 데이터를 다시 쓰는 비슷한 방식으로 수행된다. 따라서 spring에서는 이러한 기본 배치 반복을 자동화하고, 객체화 하여 사용자가 보다 쉽게 배치 작업을 수행할 수 있도록 했다.</p>
  </li>
</ul>

<h2 id="spring-batch의-기본-구현-방식">spring batch의 기본 구현 방식</h2>

<hr />

<p><img src="/assets/image/spring_batch.png" alt="성격유형 검사하기" width="100%" /></p>

<ul>
  <li>
    <p>Spring batch의 기본 구현 방식은 상단과 같다. Job launcher가 사용자가 명시한 여러가지 Job들을 수행한다. 그리고 JOB은 여러가지의 Step으로 이루어져 있다.</p>
  </li>
  <li>
    <p>유저 등급을 갱신하는 상황을 예시로 들어보면, “매월 1일 유저 등급을 갱신하고, 등급에 따라 쿠폰을 배부한다”가 Job이고, Step1은 “유저 테이블에 등급을 매긴다”, Step2는 “등급에 따라 쿠폰을 배부한다” 가 될 것이다.</p>
  </li>
</ul>

<p>그리고 Step을 구현하는 두가지 방식에 대해 알아보자</p>

<h4 id="1️⃣-tasklet-방식">1️⃣ tasklet 방식</h4>

<div style="line-height: 40px; margin-bottom: -60px">
•  step 내부에 tasklet을 가지고 있다.<br />
•  하나의 tasklet 내부에서 자유롭게 데이터를 처리한다.<br />
•  배치 과정이 비교적 쉬울 경우 사용한다.<br />
•  대량 처리를 하는 경우에는 코드가 오히려 더 복잡해질 수 있다.</div>
<p><br /></p>

<h4 id="2️⃣-chunk-방식">2️⃣ Chunk 방식</h4>

<div style="line-height: 40px">
  •  Chunk : Read, Process, Write로 이루어진 하나의 데이터 처리 단위<br />
  •  itemReader, itemProcessor, itemWriter에 대해 이해해야 구현할 수 있다.<br />
  •  하나의 큰 덩어리를 작은 덩어리로 나누어 처리할 수 있다.<br />
</div>

<p><br /></p>

<h2 id="multi-thread-기반-spring-batch-처리">Multi-thread 기반 Spring batch 처리</h2>

<hr />

<h5 id="-문제는-너무-느려-">💡 문제는, 너무 느려 !</h5>

<ul>
  <li>
    <p>spring batch의 경우 애초에 대용량의 데이터를 한꺼번에 처리하기 위해 만들어졌으므로, 수많은 레코드들을 한번에 갱신해야 한다. 그런데 문제는 ,, 스프링 배치가 기본적으로 single thread 방식으로 진행된다는 것이다 !</p>
  </li>
  <li>
    <p>하단은 1011개의 데이터를 single-thread 기반으로 처리할 때 걸린 시간을 측정한 것이다. 총 49초가 소요되었음을 알 수 있다..</p>
  </li>
</ul>

<p><img src="/assets/image/batch_result.png" alt="성격유형 검사하기" width="100%" /></p>

<ul>
  <li>물론 배치 작업이 자주 이루어지지 않거나, 서비스 장애가 크리티컬한 이슈를 만들어내지 않는 환경이라면 굳이 multi-thread 방식을 도입하지 않아도 될 것이다.</li>
  <li>
    <p>그러나 자주 배치 작업이 일어나고, 서비스 중단이 유저의 사용성에 큰 영향을 줄 경우 최대한 spring batch에 드는 시간을 줄여야하며, 이 경우 multi-thread 기반 spring batch 처리를 반드시 해야할 것이다 !</p>

    <p><br /></p>
  </li>
</ul>

<h2 id="마무리">마무리</h2>

<hr />

<ul>
  <li>이번 포스팅에서는 java spring batch가 무엇인지 알아보고, spring batch를 multi-thread로 처리할 때의 이점에 대해 알아보았다.</li>
  <li>다음 포스팅에서는 spring batch를 multi-thread로 처리하는 방법에 대해 알아보자 !</li>
</ul>

<p><br /></p>]]></content><author><name>hyeyeon-sun</name></author><summary type="html"><![CDATA[이 글에서 얻을 수 있는 정보]]></summary></entry><entry><title type="html">spring batch를 multi-thread로 구현하는 여러가지 방법</title><link href="http://localhost:4000/2023/02/17/java_spring_batch(2).html" rel="alternate" type="text/html" title="spring batch를 multi-thread로 구현하는 여러가지 방법" /><published>2023-02-17T23:45:13+09:00</published><updated>2023-02-17T23:45:13+09:00</updated><id>http://localhost:4000/2023/02/17/java_spring_batch(2)</id><content type="html" xml:base="http://localhost:4000/2023/02/17/java_spring_batch(2).html"><![CDATA[<h2 id="이-글에서-얻을-수-있는-정보">이 글에서 얻을 수 있는 정보</h2>

<hr />

<ul>
  <li>배치를 multi-thread 방식으로 처리하는 다양한 방법들과, 그것들의 비교분석</li>
  <li>multi-thread 방식으로 배치 코드를 구현할 때 주의할 점
<br /></li>
</ul>

<h2 id="multi-thread-spring-batch-처리-종류">Multi-thread Spring batch 처리 종류</h2>

<hr />

<ul>
  <li>Multi-therad 기반으로 Spring batch를 처리하는 데에는 4가지 방식이 있다.</li>
  <li>AsyncItemProcessor / AsyncItemWrite 이용, multi-Threaded Step, Paralle Steps, Externalizing Batch Process Execution 이다.</li>
  <li>네가지 방식에 대해 알아보고, 각각의 장단점을 분석해보자.
<br /><br /></li>
</ul>

<h5 id="1-asyncitemprocessor--asyncitemwrite를-이용하는-방식">1. AsyncItemProcessor / AsyncItemWrite를 이용하는 방식</h5>

<ul>
  <li>한 Step 내에서 Processor만 병렬 수행해야할 때 사용한다.</li>
  <li>itemProcessor에게 별도의 스레드가 할당되어 작업을 처리한다.</li>
</ul>

<p><img src="/assets/image/Async.png" alt="성격유형 검사하기" width="100%" /></p>

<div style="line-height: 40px; margin-bottom: 30px;">
&nbsp;&nbsp;&nbsp;&nbsp;•&nbsp;&nbsp;전반적인 작동 방식은 상단과 같은데, 해당 방식의 포인트는 ‘위임’이라고 할 수 있다.<br />
&nbsp;&nbsp;&nbsp;&nbsp;•&nbsp;&nbsp;만약 프로세스가 동기적으로 수행된다면 read를 한 뒤, 기다렸다 processor로 처리하고, 기다렸다 writer로 처리하고,, 이렇게 순차적으로 진행이 될 것이다.<br />
&nbsp;&nbsp;&nbsp;&nbsp;•&nbsp;&nbsp;그런데 이 방식은 read까지는 기다리지만, process와 write는 기다리지 않고 바로바로 다음 작업을 처리 하는 것이다.<br />
&nbsp;&nbsp;&nbsp;&nbsp;•&nbsp;&nbsp;예를 들어 A유저, B유저, C유저의 등급을 업그레이드 한다고 하자. 이때 A유저의 등급을 읽어온 다음, processor에서는 A유저의 실적으로 등급을 매기고, 이 값을 writer로 써야 한다. mainthread, ItemProcessor, ItemWriter입장에 따라 단계를 보면 하단과 같다.
</div>

<h6 id="main-processor-입장">💁🏻 main processor 입장</h6>

<ol>
  <li>Reade가 A유저의 정보를 읽어온다.</li>
  <li>그런데 이때 AsyncItemProcessor는 A유저의 등급을 다 매길때까지 기다리지 않고 thread를 파 ItemProcessor에게 이 작업을 위임하고, AsyncItemWriter로 넘어간다.</li>
  <li>AsyncItemWriter도 다 쓸때까지 기다리지 않고, ItemWiter에게 작업을 위임하고, 다시 read 작업을 넘어간다.</li>
</ol>

<h6 id="️itemprocessorthread입장">🙆‍♂️ ItemProcessor(thread)입장</h6>

<ol>
  <li>AsyncItemProcessor가 일을 시키면 열심히 처리하고, 이걸 Future라는 객체에 넣는다.</li>
  <li>일 다했으면 소멸 한다 ,,</li>
</ol>

<h6 id="️itemwriterthread입장">🙋‍♀️ ItemWriter(thread)입장</h6>

<ol>
  <li>Future내에는 비동기 처리중인 작업들이 있을 것이다. 이때 비동기 처리된 실행의 결과값을 모두 받아올 때까지 기다린다.</li>
  <li>다 받아왔으면 이 값을 DB에 저장한다.</li>
</ol>

<p><br /></p>

<h5 id="2-multi-threaded-step">2. Multi-threaded Step</h5>

<p><img src="/assets/image/multi-threaded_Step.png" alt="multi-threaded Step" width="100%" /></p>

<ul>
  <li>
    <p>Multi-threaded Step은 한 step 내에서 reader, processor, writer를 chunk단위로 병렬수행해야 할 때 사용한다.</p>
  </li>
  <li>
    <p>구체적인 순서를 살펴보면 다음과 같다.</p>
  </li>
</ul>

<div style="line-height : 40px">
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1. 먼저 Step은 TaskExecutorRepeatTemplate을 이용해 일을 한다. 이때에 Thread 만큼 Runnable을 만들고, 각 쓰레드는 일을 수행한다.<br />
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2. Runnable은 RepeatCallBack 함수를 수행한다.<br />
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3. RepeatCallBack 함수는 ChunkOrientedTasklet을 수행한다. 이 Tasklet은 read, process, write로 이루어져 있다 !<br />
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4. 각 Thread는 독립적으로 ItemReader / ItemProcessor / ItemWrite를 이용한다.<br />
</div>
<p><br /></p>

<h4 id="️-multi-threaded-step-을-사용할-때-주의할-점">❗️ Multi-threaded Step 을 사용할 때 주의할 점</h4>

<p><br /></p>

<h5 id="1-thread-free한-동기화-처리가-되는-reader를-사용하자-">1. thread-free한 (동기화 처리가 되는) reader를 사용하자 !</h5>

<ul>
  <li>
    <p>TaskExecutoerRepeatTemplate이 여러개의 일꾼(Thread)를 만들고, 일을 시키는 상황을 상상해보자. 일단 일꾼 A가 일을 잡으면, process하고 write하는 것도 오로지 그 일꾼 A가 하기 때문에 동기화 문제가 발생할 염려가 없다.</p>
  </li>
  <li>
    <p>그러나 맨처음 일을 잡으러 일꾼 A와 일꾼 B가 달려가는 상황을 상상해보자 ,, 그리고 만약 둘이 달려가서 같은 일을 잡아버린다면 ? 🫢🫢🫢</p>
  </li>
  <li>
    <p>두명의 일꾼이 동시에 process와 write를 처리해야 하다보니 데이터의 일관성에 문제가 생길 수도 있고, 불필요한 노동력이 낭비 된다.</p>
  </li>
  <li>
    <p>따라서 이런 문제를 피하기 위해 Reader는 반드시 동기화 처리가 되는 reader를 써야한다 !</p>
  </li>
  <li>
    <p>동기화 처리가 되는 reader로는 <strong>JdbcPagingItemReader / JpaPagingItemReader / SynchronizedItemStreamReader</strong>등이 있다.</p>
  </li>
</ul>

<p><br /></p>

<h5 id="2-대량의-데이터를-동시에-처리할-때-connection-pool-고갈-문제가-발생할-수-있다-">2. 대량의 데이터를 동시에 처리할 때 connection pool 고갈 문제가 발생할 수 있다 🥹</h5>

<p><img src="/assets/image/dbConnectionPool.png" alt="db connection pool" width="100%" /></p>

<ul>
  <li>java에는 커넥션 풀이라는 좋은 방식이 있다. 상단의 그림과 같은데, 기본적으로 web application과 db를 연결하는 작업은 많은 비용이 드는 작업이므로, 미리 application과 db와의 연결을 만들어두고 이것을 pool로 관리하는 것이다 !</li>
</ul>

<p>예를 들어보자</p>

<p>🙆‍♂️ Thread1이라는 일꾼 : “db 연결하고 싶어요 !!” 라고 하면<br />
🙋‍♀️ 풀 프레임워크(풀 관리해주는 친구) : “그래, 여기 있어 !”</p>

<p>라고 하면서 pool에 있는 connection을 하나 꺼내 주는 것이다.</p>

<ul>
  <li>
    <p>그런데 ,, 만약 connection pool보다 많은 일꾼이 connection을 요청한다면 ? 일꾼은 일이 끝날 때까지 계속 기다려야 하고, 대기 시간이 매우 길어질 수 있다 😱</p>
  </li>
  <li>
    <p>이뿐 아니라 만약 하나의 thread가 두개의 connection pool을 필요로 한다면 ? 최악의 경우 deadlock 문제가 발생할 수 있다 !</p>
  </li>
  <li>
    <p>따라서 Multi-threaded Step 방식을 사용할때는, 사용가능한 thread의 수와 connection pool의 최대 개수를 반드시 잘 맞추어줘야한다.</p>
  </li>
</ul>

<p><br /></p>

<h5 id="그래서-connection-pool을-몇개로-설정해야-하는데-">그래서, connection pool을 몇개로 설정해야 하는데 ??</h5>

<p><em>pool size = Tn x (Cm - 1) + 1</em></p>

<ul>
  <li><em>Tn</em> : 전체 Thread 갯수<br /></li>
  <li><em>Cm</em> : 하나의 Task에서 동시에 필요한 Connection 수</li>
</ul>

<div style="line-height : 40px; ">
- hikariWiki의 글에 따르면, 통상적으로 상단의 개수를 설정하면 된다고 한다.<br />

- 상단의 공식을 따르면 deadlock 문제를 피하면서, pool size를 최적화할 수 있다.
</div>

<p><br /></p>

<h2 id="마무리">마무리</h2>

<hr />

<ul>
  <li>이번 포스팅에서는 spring batch를 multi-thread 방식으로 구현하는 방식에 대해 알아보았다.</li>
  <li>다음 포스팅에서는 이번 글에 이어서 multi-thread 기반 spring batch 구현 방식에 대해 더 알아보자 !</li>
</ul>

<p><br /></p>]]></content><author><name>hyeyeon-sun</name></author><summary type="html"><![CDATA[이 글에서 얻을 수 있는 정보]]></summary></entry><entry><title type="html">[Programmers] 2022 KAKAO TECH INTERNSHIP - 성격유형 검사하기(python)</title><link href="http://localhost:4000/2022/09/20/programmers_2022_tech_internship_character.html" rel="alternate" type="text/html" title="[Programmers] 2022 KAKAO TECH INTERNSHIP - 성격유형 검사하기(python)" /><published>2022-09-20T23:45:13+09:00</published><updated>2022-09-20T23:45:13+09:00</updated><id>http://localhost:4000/2022/09/20/programmers_2022_tech_internship_character</id><content type="html" xml:base="http://localhost:4000/2022/09/20/programmers_2022_tech_internship_character.html"><![CDATA[<h2 id="-prolog">• Prolog</h2>
<p>(바쁘신 분들은 pass 하세유)<br />
  프로그래머스 양궁 문제로 오랫동안 씨름하다가 너무 진도가 안나가서 일단 level1문제를 간만에 풀어보았다. 앞으로 매일 한문제 이상은 풀고 포스팅을 올리는게 목표이므로 습관을 들일때 까지는 당분간 level1,2문제를 풀고, 점차 난이도를 높여가는 식으로 해야겠다.</p>

<h2 id="-problem">• Problem</h2>
<p><a href="https://school.programmers.co.kr/learn/courses/30/lessons/118666"><img src="/assets/image/photo.png" alt="성격유형 검사하기" width="100%" /></a>
↑클릭 시 문제로 이동
<br />
mbti와 같이 설문지를 주면 그 결과로 성격유형을 반환하는 문제다.</p>

<h2 id="-solution">• Solution</h2>
<p>설문지를 기반으로 점수를 매기는 부분과 매겨진 점수로 성격유형을 나타내는 부분으로 나누었다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">survey</span><span class="p">,</span> <span class="n">choices</span><span class="p">):</span>
    <span class="n">character</span> <span class="o">=</span> <span class="p">{</span><span class="s">'R'</span><span class="p">:</span> <span class="mi">0</span> <span class="p">,</span> <span class="s">'T'</span> <span class="p">:</span> <span class="mi">0</span> <span class="p">,</span> <span class="s">'C'</span><span class="p">:</span> <span class="mi">0</span> <span class="p">,</span> <span class="s">'F'</span> <span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">'J'</span><span class="p">:</span> <span class="mi">0</span> <span class="p">,</span> <span class="s">'M'</span> <span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">'A'</span><span class="p">:</span> <span class="mi">0</span> <span class="p">,</span> <span class="s">'N'</span> <span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
    <span class="n">score</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">survey</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">:</span>
            <span class="n">character</span><span class="p">[</span><span class="n">survey</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]]</span> <span class="o">+=</span> <span class="n">score</span><span class="p">[</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">elif</span> <span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">4</span> <span class="p">:</span>
            <span class="n">character</span><span class="p">[</span><span class="n">survey</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]]</span> <span class="o">+=</span> <span class="n">score</span><span class="p">[</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>
<p>character라는 딕셔너리를 생성하고, 4보다 클경우 우측의 성격유형에 값을 더하고, 4보다 작을 경우 좌측의 성격유형에 값을 더한다. 값을 더할때는 score라는 1차원 배열로 쉽게 계산할 수 있도록 했다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">character</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">character</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">==</span> <span class="n">character</span><span class="p">[</span><span class="n">pc</span><span class="p">]:</span>
                <span class="n">answer</span> <span class="o">+=</span> <span class="nb">min</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">pc</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">add</span> <span class="o">=</span> <span class="n">c</span> <span class="k">if</span> <span class="n">character</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">character</span><span class="p">[</span><span class="n">pc</span><span class="p">]</span> <span class="k">else</span> <span class="n">pc</span>
                <span class="n">answer</span> <span class="o">+=</span> <span class="n">add</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">pc</span> <span class="o">=</span> <span class="n">c</span>
        
    <span class="k">return</span> <span class="n">answer</span>
</code></pre></div></div>
<p>다음으로는 딕셔너리의 짝수값마다 순환하며 이전의 유형과 비교를 해 성격유형을 차례대로 판단한다. 이때 딕셔너리를 인덱스로 호출하는 법을 몰라 위처럼 i라는 변수를 두어 카운트 했는데, 찾아보니 <strong>enumerate</strong>라는 함수로 값을 하나하나 꺼낼 수 있다고 한다. 다음에 시도해보아야겠다.</p>

<h2 id="-result">• result</h2>
<p><img src="/assets/image/sucess.png" alt="성격유형 검사하기" width="50%" /></p>

<h2 id="-source-code">• Source Code</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">solution</span><span class="p">(</span><span class="n">survey</span><span class="p">,</span> <span class="n">choices</span><span class="p">):</span>
    <span class="n">character</span> <span class="o">=</span> <span class="p">{</span><span class="s">'R'</span><span class="p">:</span> <span class="mi">0</span> <span class="p">,</span> <span class="s">'T'</span> <span class="p">:</span> <span class="mi">0</span> <span class="p">,</span> <span class="s">'C'</span><span class="p">:</span> <span class="mi">0</span> <span class="p">,</span> <span class="s">'F'</span> <span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">'J'</span><span class="p">:</span> <span class="mi">0</span> <span class="p">,</span> <span class="s">'M'</span> <span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s">'A'</span><span class="p">:</span> <span class="mi">0</span> <span class="p">,</span> <span class="s">'N'</span> <span class="p">:</span> <span class="mi">0</span><span class="p">}</span>
    <span class="n">score</span> <span class="o">=</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">survey</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">:</span>
            <span class="n">character</span><span class="p">[</span><span class="n">survey</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]]</span> <span class="o">+=</span> <span class="n">score</span><span class="p">[</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">elif</span> <span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">4</span> <span class="p">:</span>
            <span class="n">character</span><span class="p">[</span><span class="n">survey</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]]</span> <span class="o">+=</span> <span class="n">score</span><span class="p">[</span><span class="n">choices</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">character</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">character</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">==</span> <span class="n">character</span><span class="p">[</span><span class="n">pc</span><span class="p">]:</span>
                <span class="n">answer</span> <span class="o">+=</span> <span class="nb">min</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">pc</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">add</span> <span class="o">=</span> <span class="n">c</span> <span class="k">if</span> <span class="n">character</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">character</span><span class="p">[</span><span class="n">pc</span><span class="p">]</span> <span class="k">else</span> <span class="n">pc</span>
                <span class="n">answer</span> <span class="o">+=</span> <span class="n">add</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">pc</span> <span class="o">=</span> <span class="n">c</span>
        
    <span class="k">return</span> <span class="n">answer</span>
</code></pre></div></div>]]></content><author><name>hyeyeon-sun</name></author><summary type="html"><![CDATA[• Prolog (바쁘신 분들은 pass 하세유) 프로그래머스 양궁 문제로 오랫동안 씨름하다가 너무 진도가 안나가서 일단 level1문제를 간만에 풀어보았다. 앞으로 매일 한문제 이상은 풀고 포스팅을 올리는게 목표이므로 습관을 들일때 까지는 당분간 level1,2문제를 풀고, 점차 난이도를 높여가는 식으로 해야겠다.]]></summary></entry><entry><title type="html">OCR test</title><link href="http://localhost:4000/2021/09/06/ocr_test.html" rel="alternate" type="text/html" title="OCR test" /><published>2021-09-06T23:45:13+09:00</published><updated>2021-09-06T23:45:13+09:00</updated><id>http://localhost:4000/2021/09/06/ocr_test</id><content type="html" xml:base="http://localhost:4000/2021/09/06/ocr_test.html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/39080868/132324782-0033bb95-9ebd-40b1-9149-3d95432aa3f6.png" alt="[늘봄이의 정책 톺아보기] 장애인 고용활성화 지원" />
<img src="https://user-images.githubusercontent.com/39080868/132324815-554c4beb-82b1-4e09-accb-f4a0d40aa4c8.png" alt="[늘봄이의 정책 톺아보기] 장애인 고용활성화 지원" />
<img src="https://user-images.githubusercontent.com/39080868/132324847-2358c6b3-c2d0-4e2c-a6dc-ad27b6eef8ef.png" alt="[늘봄이의 정책 톺아보기] 장애인 고용활성화 지원" />
<img src="https://user-images.githubusercontent.com/39080868/132324870-9945bc8f-9c67-406a-9324-d3c2f8b4ff6b.png" alt="[늘봄이의 정책 톺아보기] 장애인 고용활성화 지원" />
<img src="https://user-images.githubusercontent.com/39080868/132324910-483e792e-f1cc-4fcb-96d8-94da708b3258.png" alt="[늘봄이의 정책 톺아보기] 장애인 고용활성화 지원" /></p>

<p><img src="https://user-images.githubusercontent.com/39080868/132288844-6fa35d1b-1c88-42ca-b20a-a34ae6d4f17e.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/39080868/132288878-53144cd2-5c71-4d22-bc29-e0641bad515d.png" alt="image" /></p>]]></content><author><name>hyeyeon-sun</name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[node.js 공부] callback 함수</title><link href="http://localhost:4000/2021/08/08/callback.html" rel="alternate" type="text/html" title="[node.js 공부] callback 함수" /><published>2021-08-08T23:45:13+09:00</published><updated>2021-08-08T23:45:13+09:00</updated><id>http://localhost:4000/2021/08/08/callback</id><content type="html" xml:base="http://localhost:4000/2021/08/08/callback.html"><![CDATA[<h2 id="️prolog">🚶‍♀️Prolog</h2>
<p>함수의 인자가 되는 함수인, <strong>callback 함수</strong>에 대해서 알아본다. callback 함수의 경우
 node.js에서 매우 중요하게 사용되는 개념이며, 이후 동기와 비동기를 이해할 때도 핵심이 되기
 때문에 자주 사용하여 익혀두면 좋다.<br />
  먼저 callback함수의 정의에 대해 알아보고, 실제 응용 예시와 종류별 callback함수의 적용, 익명의 callback함수에 대해 알아본다.</p>

<h2 id="1-call-back-함수">1. call back 함수</h2>
<p>✔ 함수의 인자로 변수를 받을 수도 있으나, 이 뿐 아니라 함수를 받을 수도 있다. <br />
 ✔ 이때 <strong>인자로 사용되는 함수를 callback함수</strong>라고 한다.<br />
 ✔ 예를들어 하단의 코드에서 sort라는 함수는 b라는 함수를 callback 함수로 호출한다.</p>
<pre><code> a = [3,1,2];
   function b(v1, v2){console.log(v1,v2); return 0;}
   a.sort(b); </code></pre>

<p>정의한 callback함수는 내가 호출하는게 아니라, sort라는 함수가 필요할 때마다 알아서 호출한다.</p>
<blockquote>
  <p>내가 만든 callback함수는 내가 호출할 것이 아니라, 다른 누군가에 의해 언젠가 호출당할 함수다. 그런 의미에서 callback이라고 할수도 있을 것이다 !</p>
</blockquote>

<p><br /></p>

<h2 id="2-call-back-함수를-매개변수로-하는-함수-익명의-callback함수">2. call back 함수를 매개변수로 하는 함수, 익명의 callback함수</h2>

<p><strong>🔎 call back 함수를 매개변수로 하는 함수</strong></p>

<p>매개변수가 없는 callback함수를 사용할 경우 상단과 같은 형태로 정의할 수 있다. <br /> 파라미터로는 <strong>callback함수의 이름만을</strong> 입력하면 된다.</p>

<pre>function sort(callback) {callback();};</pre>

<p>callback함수가 <strong>파라미터를 가질 경우</strong>에는 위와 같이 sort함수에서 callback함수의 파라미터도 받아와 callback함수의 인자로 전달할 수도 있다.</p>

<pre>function sort(callback, v1, v2) {callback(v1, v2);};</pre>

<p><strong>배열</strong>을 파라미터로 받아와 callback함수를 적용할 수도 있다.</p>
<pre>function sort(callback, arr) {for ~ { callback()} };</pre>

<p>또는 sort에서 매개변수를 받지 않고 sort함수 내부에서 임의의 인자를 전달할 수도 있다.</p>
<pre>function sort(callback) {callback(1,3); };</pre>

<p><br /></p>

<p><strong>🔎 익명의 callback 함수</strong></p>

<p>이런 식으로 따로 callback함수의 이름을 주어주고 sort의 인자로 받아올 수도 있다.</p>

<pre><code>function a(v1, v2) {return v1-v2 ;};
function sort(a);</code></pre>

<p>또는 여러 함수에서 callback함수를 인자로 사용할 예정이 아닌 경우 이름 없이 바로 인자로 넣을 수도 있다.</p>

<pre><code>function sort(function (v1, v2) {return v1-v2 ;});</code></pre>

<p><br /></p>

<p><strong>🔎 인자(Argument) VS 매개변수(Parameter)</strong></p>

<p>인자는 어떤 함수를 ‘호출’시에 ‘전달 되는 값’을 말하고,<br />
매개 변수는 그 전달된 인자를 받아들이는 변수다.</p>

<p>즉 인자는 <strong>값</strong>을 의미하고, 매개 변수는 말그대로 <strong>그 값이 담긴 변수</strong>다.</p>

<p><br /><br /></p>]]></content><author><name>hyeyeon-sun</name></author><summary type="html"><![CDATA[🚶‍♀️Prolog 함수의 인자가 되는 함수인, callback 함수에 대해서 알아본다. callback 함수의 경우 node.js에서 매우 중요하게 사용되는 개념이며, 이후 동기와 비동기를 이해할 때도 핵심이 되기 때문에 자주 사용하여 익혀두면 좋다. 먼저 callback함수의 정의에 대해 알아보고, 실제 응용 예시와 종류별 callback함수의 적용, 익명의 callback함수에 대해 알아본다.]]></summary></entry><entry><title type="html">[node.js 공부] npm 패키지 매니저</title><link href="http://localhost:4000/2021/08/07/callback,npm.html" rel="alternate" type="text/html" title="[node.js 공부] npm 패키지 매니저" /><published>2021-08-07T23:45:13+09:00</published><updated>2021-08-07T23:45:13+09:00</updated><id>http://localhost:4000/2021/08/07/callback,npm</id><content type="html" xml:base="http://localhost:4000/2021/08/07/callback,npm.html"><![CDATA[<h2 id="️prolog">🚶‍♀️Prolog</h2>
<p>개발.. 혼자하는 게 아니라고 했다. 여러사람이 만든 모듈과 라이브러리를 바탕으로 훨씬 더
 쉽게 견고한 산출물을 만들어낼 수 있다. 특히 node.js에는 <strong>npm</strong>이라는 강력한 패키지 관리자가
 있어 보다 쉽게 개발을 할 수 있다. 이런 npm의 개념과 활용법에 대해 차근차근 알아보기로 한다.<br /></p>

<h2 id="1-npm-기본">1. npm 기본</h2>

<p>✔ NPM :  Node Package Manager의 약자다.<br />
 ✔ node.js는 javascript를 기반으로 만들어졌으니 당연히 Date, String, Array등의 모듈을 사용할 수 있다.<br />
 ✔ npm은 node계의 앱스토어 같은 느낌. 다른 사람이 만든 module을 사용할 수 있다.</p>

<h2 id="2-npm-활용">2. npm 활용</h2>

<p><strong>🔎 npm init</strong><br />
  우리는 지금 underscore라는 다른 사람이 만든 패키지를 우리것으로 가져오려고 하는 것이다. 그런데 우리의 것도 실은 하나의 패키지이기 때문에 현재 디렉토리를 패키지로 지정하는 <code>npm init</code> 명령을 해야만 한다.</p>

<ul>
  <li>이로써 우리는 우리의 디렉토리를 npm의 패키지 디렉토리로 선언을 한 것이다 !</li>
  <li>그리고 이 패키지에 대한 여러 정보를 기록도 한 것이다.</li>
</ul>

<p><strong>왜필요할까 ?</strong>  프로젝트의 의존성을 관리할 수 있으며, 나중에 프로젝트를 npm.com에 올리기 위한 초석이 될 수도 있다.
<br /></p>

<p><strong>🔎 module 설치</strong><br />
자 이제 모듈을 한번 설치해보자. <code>npm install underscore</code> 명령어로 underscore라는 모듈을 설치한다.</p>

<p>그럼 디렉토리에 변화가 생긴다 !!</p>

<p>✔ node_modules라는 디렉토리가 생기고, 하위 디렉토리로 underscore가 생긴다. 그 안에 우리의 모듈이 위치한다.<br />
  ✔ pakage.json 파일에 dependencies(의존성)항목으로 underscore 항목이 생긴다. 
      <br />-&gt; 이 항목이 있으면, 우리가 pakage.json이라는 파일만 있으면 언제든 underscore 파일을 포함시킬 수 있다.</p>

<p><strong>🔎 npm install [name] VS npm install [name]-g</strong></p>
<ul>
  <li><code>npm install [name] -g</code> : 설치하는 패키지를 전역적으로 사용하겠다는 의미다.</li>
  <li><code>npm install [name]</code> : 설치하는 패키지를 현재 프로젝트의 부품으로 사용하겠다는 의미다.<br /><br /></li>
</ul>

<h2 id="-모듈-정보">👉 모듈 정보</h2>
<p>실습과정에서 사용한 모듈과 명령어에 대한 정보를 정리해보았다. <br /></p>

<p>🔅 <code>uglifyjs [filename] -o [newfilename] -m</code> 하면 경량화된 파일을 저장할 수 있다.<br />
🔅 underscore은 보통 변수를 _로 선언하는 모듈로, javascript에서 기본적으로 제공되지 않는 다양한 기능을 제공한다.<br />
🔅  _ = require(‘underscore’);</p>]]></content><author><name>hyeyeon-sun</name></author><summary type="html"><![CDATA[🚶‍♀️Prolog 개발.. 혼자하는 게 아니라고 했다. 여러사람이 만든 모듈과 라이브러리를 바탕으로 훨씬 더 쉽게 견고한 산출물을 만들어낼 수 있다. 특히 node.js에는 npm이라는 강력한 패키지 관리자가 있어 보다 쉽게 개발을 할 수 있다. 이런 npm의 개념과 활용법에 대해 차근차근 알아보기로 한다.]]></summary></entry><entry><title type="html">[node.js 공부] node.js 서버 구축</title><link href="http://localhost:4000/2021/08/07/nodejs-copy.html" rel="alternate" type="text/html" title="[node.js 공부] node.js 서버 구축" /><published>2021-08-07T23:35:13+09:00</published><updated>2021-08-07T23:35:13+09:00</updated><id>http://localhost:4000/2021/08/07/nodejs%20copy</id><content type="html" xml:base="http://localhost:4000/2021/08/07/nodejs-copy.html"><![CDATA[<h2 id="️prolog">🚶‍♀️Prolog</h2>
<p>아직 백엔드조차 제대로 섭렵하지 못한 초보지만,, 그래도 언젠가는 프론트도 백엔드도 다 하고 싶은 풀스택 개발자가 되고 싶다는 꿈이 있다 .. ⭐ 따라서 javascript 기반으로 서버를 다룰 수 있는 node.js가 배우고 싶어졌다 ! 이에 인프런에서
 강의를 찾아 열심히 따라하며 공부하고 있다. <a href="https://www.inflearn.com/course/nodejs-%EA%B0%95%EC%A2%8C-%EC%83%9D%ED%99%9C%EC%BD%94%EB%94%A9/dashboard">egoing 님의 강의</a>를
 참고해 공부하고 있고, 공부하며 정리한 내용들을 블로그에 올려볼 것이다 !
<br /></p>

<h2 id="1-nodejs-서버-구축">1. nodejs 서버 구축</h2>
<hr />
<p>웹서버를 호스팅하는 간단한 코드와 그 설명을 보면서 node.js와 조금 친해져보자.</p>
<pre><code>const http = require('http'); 
const hostname = '127.0.0.1';
const port = 1337;

http.createServer((req, res) =&gt; { // 서버를 만든다.
    res.writeHead(200, { 'Content-Type': 'text/plain' });
    res.end('Hello World\n');
}).listen(port, hostname, () =&gt; { // listen을 할건데, listen할 port번호와 hostname을 전달받는다.
    console.log(`Server running at http://${hostname}:${port}/`);
});
// 코드가 1337 code를 listening하도록 만드는 것이다.
// 또 127.0.0.1로 접속한 사용자에 대해 응답하라는 것이다.
</code></pre>

<p>코드에 대한 설명은 주석을 통해 알 수 있다. http라는 모듈은 웹 서버를 호스팅할 수 있는 다양한 기능이 담긴 pakage인데, 이를 가져온다. 그리고 http의 메소드닌 createServer를 이용해 서버를 만들고, listen 메소드를 통해 만들어진 서버가 127.0.0.1이라는 호스트의 1337port를 listen할 것이라고 지정해준다.<br />
 여기서 끝~! 나면 안되고 ,, 반드시 공식 문서를 참고하는 버릇을 들이자. <a href="https://nodejs.org/api/">node.js docs</a>를 참고해 해당 문서에 쓰인 api의 명세를 정리해보았다.
<br /></p>

<h2 id="2-nodejs-http-api-명세">2. node.js http api 명세</h2>
<hr />
<p><strong>🔎 http.createServer([options][, requestListener])</strong><br />
– options -&gt; IncomingMessage, ServerResponse, insecureHTTPParser, maxHeaderSize 등을 명시<br />
– [, requestListener] -&gt; &lt;Function&gt; 서버에 관한 함수를 입력으로 받음.<br />
– Returns &lt;http.server&gt;<br /></p>

<p><strong>🔎 server.listen([port[, host[, backlog]]][, callback])</strong><br />
– port &lt;number&gt; <br />
– host &lt;string&gt; <br />
– backlog &lt;number&gt; <br />
– callback &lt;Function&gt;<br />
– Returns: &lt;net.Server&gt;<br />
description : 서버가 .port와 host에 해당하는 것을 listening한다.<br />
server.listen에는 4가지 종류가 있으며, 위는 TCP에 해당되는 method다. <br />
<br /></p>

<h2 id="결론">결론</h2>
<p>node.js로 간단한 서버를 구축해 보았다. 좋은 블로그 글과 stackoverflow님도 개발에 정말 많은 도움이 되지만, 이제 막 배우기 시작한 언어에 접근하는 가장 확실하고도 효율적인 방법은 공식문서인 것 같다 ! 앞으로도 눈에 잘 안들어올지라도 더 열심히 들여다보고 익혀야겠다.</p>]]></content><author><name>hyeyeon-sun</name></author><summary type="html"><![CDATA[🚶‍♀️Prolog 아직 백엔드조차 제대로 섭렵하지 못한 초보지만,, 그래도 언젠가는 프론트도 백엔드도 다 하고 싶은 풀스택 개발자가 되고 싶다는 꿈이 있다 .. ⭐ 따라서 javascript 기반으로 서버를 다룰 수 있는 node.js가 배우고 싶어졌다 ! 이에 인프런에서 강의를 찾아 열심히 따라하며 공부하고 있다. egoing 님의 강의를 참고해 공부하고 있고, 공부하며 정리한 내용들을 블로그에 올려볼 것이다 !]]></summary></entry><entry><title type="html">지원 동기 : backend.ai 설치과정</title><link href="http://localhost:4000/2021/07/25/motivate.html" rel="alternate" type="text/html" title="지원 동기 : backend.ai 설치과정" /><published>2021-07-25T23:45:13+09:00</published><updated>2021-07-25T23:45:13+09:00</updated><id>http://localhost:4000/2021/07/25/motivate</id><content type="html" xml:base="http://localhost:4000/2021/07/25/motivate.html"><![CDATA[<h2 id="️prolog">🚶‍♀️Prolog</h2>
<p>backend.ai 개발 프로젝트를 진행하기 위해 backend.ai 환경을 설정하는 과제가 있었다. 이에 환경설정을 위해 노력했으나 아직은 에러를 해결중이다. 따라서 지금까지의 노력을 먼저 정리해보고자 한다.
<br /></p>

<ol>
  <li>
    <h2 id="backendai-web-server-개요">backend.ai Web Server 개요</h2>
  </li>
</ol>

<p>SPA로 webui를 제공하고, API 요청을 프록시 하는 웹앱 호스팅 데몬</p>

<ul>
  <li>SPA란 ? Single Page Application의 약자로, 페이지가 변경될때마다 전체를 로드하는 것이 아니라, 브라우저에 최초에 한번 페이지 전체를 로드하고, 이후부터는 특정 부분만 Ajax를 통해 데이터를 바인딩하는 방식이다.</li>
  <li>API 요청을 프록시 한다는 건 무슨 뜻일까? IP 주소로 웹 서버에 접속할 때, 현재 컴퓨터의 IP로 바로 접속되는 것이 아니라 일종의 대리인 역할을 하는 서버가 존재해</li>
  <li>그 서버에서 웹서버의 데이터를 받아오고, 받아온 데이터를 나의 컴퓨터로 전송해준다. 이 역할을 해주는 서버를 proxy라고 한다.</li>
</ul>

<ol>
  <li>
    <h2 id="backendai-web-server-설치-prepare">backend.ai Web Server 설치 (prepare)</h2>
    <p>먼저 3.9 버전 이상의 파이썬 가상환경과, 6.2 이상의 Redis 서버를 준비한다.</p>
  </li>
</ol>

<p>🔎 파이썬 가상환경 설정
– python -m venv BEvenv : 해당 명령어로 가상환경을 만든다.
– 가상환경 폴더의 Scripts에 들어가서 activate 명령어를 입력하면 가상환경이 작동된다.</p>

<p>🔎 redis 서버 설치
– Redis 서버의 경우 윈도우 10에서는 지원하지 않는다고 한다 ..
대신 https://github.com/tporadowski/redis에서 redis를 지원한다고 하니 작동시켜보자<br />
-&gt; 최대가 5.0.10 인데 … -&gt; 일단은 할 수 있는 가장 최신의 버전을 돌려보고 버전때문에 발생하는 이슈가 있으면 가상환경이나 컨테이너 등을 활용해보는 것으로 결정.</p>

<p>여기서 5.2.10 버전 release 폴더에서 zip 파일을 압축해제하고, redis-server.exe를 실행한다.</p>

<ol>
  <li>
    <h2 id="backendai-web-server-설치프로젝트-클론--실행">backend.ai Web Server 설치(프로젝트 클론 &amp; 실행)</h2>
  </li>
</ol>

<p>좋아 이제 프로젝트를 클론해오고
pip install -U -e .를 하려는데 ..?</p>

<ul>
  <li>
    <p>PermissionError: [WinError 5] 액세스가 거부되었습니다: 에러 -&gt; 관리자 권한으로 실행하니 해결되었다.</p>
  </li>
  <li>
    <p>Could not find a version that satisfies the requirement backend.ai-client&gt;=21.9.0.
 pip 자체에 이 소스가 없다는 뜻인 것 같은데 .. pip upgrade도 했는데 왜 에러가 날까 했더니
-&gt; pip3 install –upgrade pip 이걸로 업그레이드 해도 되지가 않는다 ..
-&gt; 아무리 업그레이드를 해도 이미 최신을 충족한다고 뜬다… https://m.blog.naver.com/bb_/221717225516 를 참고해 python 가상환경 때문이란 걸 알게 되었다.
 -&gt; 가상환경을 높은 버전의 python 으로 다시 하자 ! 흠 그런데 redis도 윈도우 지원하는게 낮은 버전밖에 없어서 그걸 깔았는데 ..</p>
  </li>
</ul>

<p><img src="https://user-images.githubusercontent.com/39080868/126967143-7906b739-ead5-470b-8209-a10284f73183.png" alt="image" /></p>

<p>https://hengbokhan.tistory.com/m/139 참고해서
py -3.9.6 -m pip install virtualenv
 –&gt; 3.9.6 버전의 virtualenv 설치
 –&gt; 3.9.6 버전의 가상환경 만들기</p>

<p>했으나 .. https://umbum.dev/1079 를 통해 결국 파이썬 새 버전을 다시 설치하는 수밖에 없다는 걸 알게 되었다.
파이썬으로 진행하고 있는 다른 프로젝트도 있기에 버전이 꼬일 게 염려되었고, 따라서 아나콘다 가상환경을 활용하기로 했다.</p>

<ol>
  <li>
    <h2 id="backendai-web-server-설치---docker-이용">backend.ai Web Server 설치 - docker 이용</h2>
  </li>
</ol>

<p>아나콘다 가상환경을 설정했음에도 버전이 없다는 에러가 발생했다. 그런데 그때 상단의 에러를 다시 한번 살펴보니 window에서 해당파일을 사용할 수 없다는 에러가 발생했고, 따라서 docker을 통해서 프로그램을 다시 설치하기 시작했다.<br /></p>

<p>웹상의 자료를 참고해 docker-compose.yml 파일을 만들었다.
<img src="https://user-images.githubusercontent.com/39080868/126967006-ed5219d8-c1cf-42a1-8b50-d1ed5c7c7aa3.png" alt="image" /></p>

<p>그러나 docker을 돌리는 과정에서 에러가 발생했다.. docker run hello world 부터 안되기 시작했다.</p>

<p><img src="https://user-images.githubusercontent.com/39080868/126966747-867943a6-b4a2-4a80-9cdb-c222120d52d1.png" alt="image" /></p>

<p>따라서 docker를 지우고 다시 설치했고, window 10 home 버전이기에 두가지 방법이 있었다.</p>
<ul>
  <li>hyper-v를 이용한 방식 -&gt; 설치는 정상적으로 되지만, 클라이언트에서만 되고 서버 버전은 제대로 깔리지 않는 에러가 발생했다.</li>
  <li>WSL2 설치 -&gt; powher shell 창이 먹통이 되며 컴퓨터가 다운되는 에러가 발생했다.</li>
</ul>

<p><br /><br /></p>

<p>미션을 끝까지 완수하지 못한것은 아쉽지만, docker-compose 파일을 작성하며 docker 환경설정에 대해 다시 복기할 수 있는 기회가 되어서 좋았다. 컴퓨터를 고치는 대로 다시 WSL2를 설치하고, docker 데몬을 실행해 환경설정을 하고 backend.ai를 다시 돌려볼 예정이다.</p>]]></content><author><name>hyeyeon-sun</name></author><summary type="html"><![CDATA[🚶‍♀️Prolog backend.ai 개발 프로젝트를 진행하기 위해 backend.ai 환경을 설정하는 과제가 있었다. 이에 환경설정을 위해 노력했으나 아직은 에러를 해결중이다. 따라서 지금까지의 노력을 먼저 정리해보고자 한다.]]></summary></entry><entry><title type="html">50일간의 개발 공부 계획 👩‍💻</title><link href="http://localhost:4000/2021/07/15/plan.html" rel="alternate" type="text/html" title="50일간의 개발 공부 계획 👩‍💻" /><published>2021-07-15T23:45:13+09:00</published><updated>2021-07-15T23:45:13+09:00</updated><id>http://localhost:4000/2021/07/15/plan</id><content type="html" xml:base="http://localhost:4000/2021/07/15/plan.html"><![CDATA[<h2 id="️prolog">🚶‍♀️Prolog</h2>
<p>근 3일 정도 뭔가 마음 한구석이 불안한 느낌이 들었다. 왜 그럴까 생각해보니 ‘내가 해야할 것을 하지 않고 있다’ 라는 생각이 들었기 때문이다. 방학과 휴학을 다짐하며 몇가지 계획한 것들이 있는데, 세가지로 추려보자면 <strong>개발 공부&amp;프로젝트 하기, 건강한 몸 만들기, 레저 동아리 가입하기</strong>이다.
 <br />   레저 동아리의 경우는 코로나가 너무 심해진 관계로 😥 어려울 것 같아 pass하고, 건강한 몸 만들기도 필라테스와 유산소운동으로 어느 정도 실천을 하고 있지만..</p>

<blockquote>
  <p>개발공부를 근 2주간 게을리했고, 이게 내 불안함의 근원임을 알게 되었다.
<br /></p>
</blockquote>

<h2 id="goal">🎈Goal</h2>

<p>방학 동안 이루고 싶은 커리어 관련 목표는 다음과 같다.<br /></p>

<blockquote>
  <p><strong>- IT연합동아리 합격</strong><br />
<strong>- 오픈소스 컨트리뷰션 아카데미 합격</strong><br />
<strong>- 공개 SW 개발 대회 지원해 경험 쌓기.</strong><br />
<strong>- 휴학 기간 동안 꾸준히 경력 쌓을 수 있는 곳 지원하기</strong> ex) 랩실 컨택 or 인턴 or 장기 현장 실습 등</p>
</blockquote>

<p>그리고 목표를 달성하기 위해 해야할 일을 하나씩 살펴보자.</p>

<h5 id="it연합동아리-정보">IT연합동아리 정보</h5>
<p>일단 내가 지원하고자 하는 동아리의 목록은 다음과 같다.
 모집일자가 임박한 순으로 나열하였다.</p>

<ul>
  <li>
    <p><strong>YAPP</strong><br />
  ✔️ 6개월동안 하나의 서비스를 런칭할 수 있는 것을 목표로 함 <br /> 
  ✔️ 6개월동안 활동하는데 문제가 없고, 실력을 키우기 위해 배우려는 의지가 있는 누구나<br /> 
  ✔️ 책임감이 따를 수 있는 동아리 활동을 끝까지 참여할 수 있는지에 대한 의지와 열정이 있는가를 우선시 삼는다. (출처는 YAPP 면접관 님의 글 <a href="https://velog.io/@jshme/YAPP-%ED%8C%80%EC%9B%90%EC%97%90%EC%84%9C-%EB%A9%B4%EC%A0%91%EA%B4%80%EA%B9%8C%EC%A7%80">링크</a>)<br /></p>
  </li>
  <li>
    <p><strong>DDD</strong><br />
✔️ 직장인 분들이 매우 많으신 동아리(거의 9:1의 비율)<br /> 
✔️ 학생, 직장인 상관 없이 개발자, 디자이너로 팀 프로젝트 수행이 가능한 분<br />
✔️다양한 사람들과 폭 넓고 깊이 있는 네트워킹을 원하시는 분</p>
  </li>
  <li>
    <p><strong>SOPT</strong><br />
✔️ 저번 기수 지원했다 떨어진 동아리 ㅠㅠ 이번에는 꼭 붙고 싶다 !!<br /> 
✔️ 열정을 가지고 끊임없이 시도할 줄 아는 사람<br /> 
✔️ 협업의 가치를 알고 나아갈 줄 아는 사람, 팀 내에서 좋은 영향을 줄 수 있는 사람<br /> 
✔️ 특히 서버에서 node.js, javascript에 대한 자소서 문항이 있었다. 얕게만 알고 있었는데, 제대로 공부해볼 예정이다 !<br /></p>
  </li>
  <li>
    <p><strong>디프만</strong><br />
✔️ 디자이너와 프로그래머의 동반 성장을 이끌어내는 동아리<br />
✔️ 직장인 비율이 높은 편<br /></p>
  </li>
</ul>

<p><br /></p>

<h2 id="-plan">📅 Plan</h2>

<blockquote>
  <ol>
    <li>하루 최소 5시간 이상 개발 공부하고, TIL 작성하기
      <ul>
        <li>인프런 node.js, react 강의 듣기</li>
        <li>노마드 코더로 클론 코딩 하기</li>
      </ul>
    </li>
    <li>프로젝트 진행하기
      <ul>
        <li>클론코딩 경험 바탕으로 ‘약속해줘’프로젝트 완성하기</li>
        <li>공개 sw 개발대회 프로젝트 진행하기</li>
      </ul>
    </li>
    <li>지원서 작성 &amp; 인턴할 곳 등 알아보기</li>
  </ol>
</blockquote>]]></content><author><name>hyeyeon-sun</name></author><summary type="html"><![CDATA[🚶‍♀️Prolog 근 3일 정도 뭔가 마음 한구석이 불안한 느낌이 들었다. 왜 그럴까 생각해보니 ‘내가 해야할 것을 하지 않고 있다’ 라는 생각이 들었기 때문이다. 방학과 휴학을 다짐하며 몇가지 계획한 것들이 있는데, 세가지로 추려보자면 개발 공부&amp;프로젝트 하기, 건강한 몸 만들기, 레저 동아리 가입하기이다. 레저 동아리의 경우는 코로나가 너무 심해진 관계로 😥 어려울 것 같아 pass하고, 건강한 몸 만들기도 필라테스와 유산소운동으로 어느 정도 실천을 하고 있지만.. 개발공부를 근 2주간 게을리했고, 이게 내 불안함의 근원임을 알게 되었다.]]></summary></entry><entry><title type="html">jekyll 블로그를 localhost로 볼 때 발생하는 에러</title><link href="http://localhost:4000/2021/07/06/error.html" rel="alternate" type="text/html" title="jekyll 블로그를 localhost로 볼 때 발생하는 에러" /><published>2021-07-06T23:45:13+09:00</published><updated>2021-07-06T23:45:13+09:00</updated><id>http://localhost:4000/2021/07/06/error</id><content type="html" xml:base="http://localhost:4000/2021/07/06/error.html"><![CDATA[<h2 id="-프롤로그">💁🏻 프롤로그</h2>

<p>jekyll로 블로그를 시작하며 글을 수시로 수정해야 했다. 그러나 수정할 때마다 commit을 올리니 commit 내역이 너무 복잡해졌고, 나의 github가 더럽혀지고 있다는 .. 느낌이 들었다 😢
 따라서 git에 올리기 전 로컬 상에서 나의 블로그를 확인하고 싶어 <a href="https://sunio00000.github.io/til/2020/12/30/TIL_template.html">이 포스트</a>를 참고해 시도 했으나 ..</p>

<blockquote>
  <p>역시나, 에러를 만났다.🤦‍♂️🤦‍♂️</p>
</blockquote>

<p>따라서 이 포스팅에서는 로컬로 깃헙 블로그를 띄우는 과정에서 발생한 에러와 솔루션을 정리해보겠다. <!--더불어 그냥 jekyll serve와 bundler exec jekyll serve가 뭐가 다른지에 대해서도 알아본다.--></p>

<ol>
  <li>jekyll-feed 설치시 Ruby devkit이 없어 발생하는 에러</li>
  <li>Layout requested 에러
  <!--+ bundler exec jekyll serve 와 jekyll serve의 차이--></li>
</ol>

<p>좋아 해결하러 가보자 !<br /><br /></p>

<h3 id="1️⃣-jekyll-feed-설치시-devkit이-없어-발생하는-에러">1️⃣ jekyll-feed 설치시 devkit이 없어 발생하는 에러</h3>
<pre><code>Temporarily enhancing PATH for MSYS/MINGW...
Building native extensions. This could take a while...
ERROR:  Error installing jekyll-feed:
        ERROR: Failed to build gem native extension.

    current directory: C:/Ruby27-x64/lib/ruby/gems/2.7.0/gems/http_parser.rb-0.6.0/ext/ruby_http_parser   
C:/Ruby27-x64/bin/ruby.exe -I C:/Ruby27-x64/lib/ruby/2.7.0 -r ./siteconf20210702-36720-16nrqbx.rb extconf.rb
creating Makefile

current directory: C:/Ruby27-x64/lib/ruby/gems/2.7.0/gems/http_parser.rb-0.6.0/ext/ruby_http_parser       
make "DESTDIR=" clean
current directory: C:/Ruby27-x64/lib/ruby/gems/2.7.0/gems/http_parser.rb-0.6.0/ext/ruby_http_parser       
make "DESTDIR="
make failedNo such file or directory - make "DESTDIR="

Gem files will remain installed in C:/Ruby27-x64/lib/ruby/gems/2.7.0/gems/http_parser.rb-0.6.0 for inspection.
Results logged to C:/Ruby27-x64/lib/ruby/gems/2.7.0/extensions/x64-mingw32/2.7.0/http_parser.rb-0.6.0/gem_make.out</code>
</pre>

<p>에러 메세지는 상단과 같다. jekyll 패키지 설치를 위해 <code>gem install jekyll-feed</code> 명령어를 입력했을 때 발생하는 에러인데, <a href="https://github.com/jekyll/jekyll-help/issues/209">jekyll 이슈 페이지</a>를 통해서 <strong>ruby 를 설치할 때 devkit이 없어서 발생하는 에러</strong>라는 것을 알게 되었다. <br /> 따라서 chocolatey(window의 apt-get같은 툴)를 통해 ruby devkit을 설치해 보았으나 그럼에도 계속 같은 에러메세지가 떴다ㅠㅠ 이것 때문에 시간을 꽤나 많이 썼다 후우 … 결국 ruby를 지웠다가 다시 깔았는데, 그 과정에서 해결법을 발견했다 !</p>

<blockquote>
  <p><strong><em>Ryby 설치 시 반드시 devkit 항목을 체크 해주어야 한다</em></strong><br /><br />
<img src="/img/posts/error/ruby-installer.jpg" alt="Image Alt 텍스트" width="80%" height="80%" />
window에서 ruby를 설치하다보면 상단처럼 설치할 패키지를 선택하라는 화면이 나오는데, 이때 <code>MSYS2 development toolchain</code>를 반드시 체크해야만 에러가 나지 않는다.</p>
</blockquote>

<p>정확한 원인은 모르겠으나 ruby dev-kit을 chocolately로 따로 깔면 안되고, 설치 과정에서 같이 깔아줘야 제대로 dev-kit을 인식하는 것 같다.<br /></p>

<p>늘 느끼는 거지만 매우 간단한 실수임에도 찾는데는 매우 오랜 시간이 걸린다 흙흙 그래도 고친 뒤에 잘 돌아가는 프로그램 보면 또 다 잊어버리고 .. 행복해지고,, 5분 뒤에 또 새로운 에러로 고통받고 ^^ 이런 과정의 무한 반복 😂😂
<br /><br /></p>

<h3 id="2️⃣-layout-requested-error">2️⃣ Layout requested error</h3>

<p>이렇게 성공적으로 ruby와 jekyll 요소를 설치하는 데 성공하고 상쾌한 마음으로 <code>jekyll serve</code>명령어를 cmd에 입력했다. 그러나 또 다시 에러를 만나버렸다 하하하ㅏ하</p>

<pre><code>Build Warning: Layout 'post' requested in _posts/2021-7-1-start.md does not exist.
Build Warning: Layout 'post' requested in _posts/2021-7-7-error.md does not exist.  
Build Warning: Layout 'page' requested in about.html does not exist.
Build Warning: Layout 'page' requested in contact.html does not exist.
Build Warning: Layout 'page' requested in posts/index.html does not exist.
Build Warning: Layout 'home' requested in index.html does not exist.
</code></pre>

<p>에러 메세지는 위와 같다. layout 폴더가 없어서 발생하는 문제다. 처음 jekyll로 블로그를 만들었을 때는 jekyll 기본 제공 테마를 사용해 layout폴더를 따로 갖고 있지 않았다. 그럼에도 github page에서는 잘 돌아갔는데, 아무래도 로컬에서 돌리려니 잘 되지 않아서 해결책으로 일단</p>

<blockquote>
  <p>기본 테마 대신 layout 폴더를 포함하는 블로그 테마를 사용하였다.</p>
</blockquote>

<p>그러자 문제 없이 잘 동작했고, 블로그 미리 보기를 할 수 있게 되었다 !! 👏👏👏<br /></p>

<p>그런데 여기서, 그렇다면 jekyll 기본 테마를 사용하는 사람은 로컬에서 볼 수가 없는건가? 하는 생각이 들었다. 이 부분은 다른 포스팅에서 이야기해보겠다 ( ͡° ͜ʖ ͡°)</p>

<!--layout 폴더 없이 jekyll 기본 테마로 블로그를 만들고 jekyll serve명령어를 입력했을 때 발생한다.<br>

layout 폴더가 존재하는 테마로 바꾸어 해결했다.

3. jekyll serve VS bundler exec jekyll serve<br>
 (추정) bundler의 경우 gem파일이 있어야 작동하고, jekyll serve는 gem파일이 없어도
 작동한다.-->]]></content><author><name>hyeyeon-sun</name></author><summary type="html"><![CDATA[💁🏻 프롤로그]]></summary></entry></feed>